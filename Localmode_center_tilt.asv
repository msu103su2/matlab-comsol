function [localmodefreq, localmodeEffMass]= Localmode_center_tilt(links,leftEndCoord,rightEndCoord, params)
eps = 1e-10;
import com.comsol.model.*
import com.comsol.model.util.*
centerline = mphselectbox(links.model,'geom1', [leftEndCoord(1)-eps,rightEndCoord(1)+eps;-eps,eps;-eps,eps;], 'edge');

PhCdata = mpheval(links.model,'w','edim',3);

lowlinedata_disp = mpheval(links.model,'w','edim',1,'selection',centerline(1));
coords = lowlinedata_disp.p;
low_dp = lowlinedata_disp.d1;

highlinedata_disp = mphinterp(links.model,'w','coord',-coords);
high_dp = highlinedata_disp;

judge = zeros(size(low_dp,1),1);
for rowi = 1:size(low_dp,1)
    %{
    level = mean(abs(low_dp(rowi,:)))+ mean(abs(high_dp(rowi,:)));
    level = level/200;
    
    temp1 = absdiff(rowi,:);
    temp2 = temp1>level;
    temp1 = temp1(temp2);
    if size(temp1,2)>0
    else
        judge(rowi) = 1;
    end
    %}
    coef = corrcoef(high_dp(rowi,:),low_dp(rowi,:));
    if coef(1,2)<-0.98
        flapFlag = 1;
        data = [abs(low_dp(rowi,:));-coords(1,:)];
        data = sortrows(transpose(data),2);
        [pks, locs] = findpeaks(data(:,1), data(:,2));
        for j = 1 : size(pks)
            x = -locs(j);
            ymax = 0;
            for edgeFind_i = 1:size(PhCdata.p,2)
                if(abs(PhCdata.p(1,edgeFind_i)-x)<Params{1}{8}.value && abs(PhCdata.p(2,edgeFind_i)) > abs(ymax))
                    ymax = PhCdata.p(2,edgeFind_i);
                end
            end
            cutcoords = zeros(3,21);
            cutcoords(1,:) = cutcoords(1,:)+x;
            cutcoords(2,:) = 0:ymax/20:ymax;
            transverseCut = mphinterp(links.model,'w','coord',cutcoords,'solnum',rowi);
            transverseCut = transverseCut(find(~isnan(transverseCut)));
            %sprintf('%i:%i:%d',rowi,j,((max(transverseCut)-min(transverseCut))/abs(mean(transverseCut))))
            if ((max(transverseCut)-min(transverseCut))/abs(mean(transverseCut)) > 0.3)
                flapFlag = 0;
                break;
            end
        end
        judge(rowi) = 1*flapFlag;
    end    
end

centerlinedata_disp = mpheval(links.model,'u*u+v*v+w*w','edim',1,'selection',centerline);
centerlinedata_disp.d1 = centerlinedata_disp.d1(find(judge),:);

if isequal(size(centerlinedata_disp.d1,1),0)
    fprintf('No mode identified');
    allfreq = mphglobal(links.model, 'solid.freq');
    localmodefreq = allfreq(1);
    localmodeEffMass = 1e-6;
else
    maxpointdata_disp = zeros(size(centerlinedata_disp.d1,1),1);
    for i=1:size(centerlinedata_disp.d1,1)
        maxpointdata_disp(i) = max(centerlinedata_disp.d1(i,:));
    end
    temp = mphint2(links.model,'solid.rho*(u*u+v*v+w*w)',3);
    temp = temp(find(judge));
    effectivemass = temp./(maxpointdata_disp)';
    [localmodeEffMass, index] = min(effectivemass);
    allfreq = mphglobal(links.model, 'solid.freq');
    allfreq = allfreq(find(judge));
    localmodefreq = allfreq(index);
end
end

function [width, thickness] = getSize(position, params)
    x = position(1); y = position(2); z = position(3);
    if inCell(x, params.defect)
        if inRec(x, params.defect.A)
            width = params.defect.A.width;
            thickness = params.defect.A.height;
        elseif inRec(x, params.defect.B)
            width = params.defect.B.width;
            thickness = params.defect.B.height;
        else
            width = params.defect.C.width;
            thickness = params.defect.C.height;
        end
    else
        for i = 1:params.NumofUC*2
            if inCell(x, params.defect(i))
                if inRec(x, params.defect.A)
                    width = params.defect.A.width;
                    thickness = params.defect.A.height;
                elseif inRec(x, params.defect.B)
                    width = params.defect.B.width;
                    thickness = params.defect.B.height;
                else
                    width = params.defect.C.width;
                    thickness = params.defect.C.height;
                end
            end
        end
    end
end

function re = inCell(x, unitcell)
    if x <= unitcell.x + unitcell.length/2 && x >= unitcell.x - unitcell.length/2
        re = true;
    else
        re = false;
    end
end

function re = inRec(x, rectangle)
    if x <= rectangle.x + rectangle.length/2 && x >= rectangle.x - rectangle.length/2
        re = true;
    else
        re = false;
    end 
end